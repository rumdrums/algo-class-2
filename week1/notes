Searching a Graph
. checking if a network is connected
. driving directions
. formulating a plan -- eg, how to fill in a sudoku puzzle
. compute the "pieces" or "components" of a graph


How to Search a Graph
. Goals: 1) given a vertex as a starting point, find everything
  findable from that vertex -- ie, that can be found from starting point
 -- generally, everything that's connected
 -- if directed graph, everything that works direction-wise too
 2) don't explore anything twice

Outline of generic search algorithm
. divide nodes into unexplored and explored
. have a boolean per node to indicate explored/unexplored
  while possible:
    choose an edge (u,v) with u explored and v unexplored -- if none, halt
    mark v explored
    get your edges that cross the 'frontier' and pick one of them

How to Choose Among the Many Possible "Frontier" Edges
. frontier edges -- those who have one end explored and one end unexplored

Breadth-First Search ( BFS )
. explore nodes in layers -- s is layer 0, explore all adjacent nodes of s first (layer 1), then 
  the adjacent nodes of those nodes (layer 2), etc.
. O(m+n) time -- n = number of nodes, m = number of edges
. Algorithm:

BFS(Graph G, vertex s):
 mark s as explored
 let Q = queue data structure (FIFO), intialized with s
 while Q != 0 (not empty):
   remove the first node of Q, call it v
   for each edge (v,w):
     if w eunexplored
     mark w as explored
     add w to Q    

Application: Shortest Paths ( only breadth-first )
. add extra code to algorithm
 -- estimate distance from s to v:
   if v==s: dist(v) = 0
 -- s's distance is 0; set dist(each subsequent vertex)
    1 + the distance of the vertex that discovered it
 -- nodes in each layer should have same distance

Application: Finding Connected Components via BFS
Algorithm (O(m+n) time):
 mark all nodes unexplored ( assume labeled 1 to n )
 for i=1 to n (note: i in each iteration can be completely unconnected to previous/subsequent
               values of i)
   if i not explored:
    BFS(G,i) (note: this will, of course, only traverse connected points, unlike the for loop)


BFS(Graph G, vertex s):
 mark s as explored
 let Q = queue data structure (FIFO), intialized with s
 while Q != 0 (not empty):
   remove the first node of Q, call it v
   for each edge (v,w):
     if w eunexplored
     mark w as explored
     add w to Q  


Depth-First Search ( DFS ) -- also O(n+m) time
. explore aggressively like a maze, backtracking when necessary
. algorithm:
 -- use stack instead of queue, otherwise very similar to breadth-first
 -- can be recursive instead of iterative

DFS(Graph G, start vertex s)
  mark s as explored
  for every edge(s,v):
    if v unexplored:
      DFS(G,v)

Topological Ordering
. gives you a numeric ordering for the vertices in directed graphs
. eg, with 4 vertices, you can label them 1,2,3,4 -- F(s)
. must be acyclic, no cycles in the verticies
  -- as long as no cycles, a topological ordering does exist
. DFS allows you to calculate these

Algorithm for Topological Ordering with DFS
. running time: O(m+n)
 -- all edges and nodes are looked at only once
. basically, you start with the last node, which should be a "sink
  vertex", number that one, then remove it, consider the next-to-last
  node(s), which are now the sink vertex, label it, and move on

DFS-Loop(graph G)
  mark all nodes unexplored
  current_label = n # to keep track of ordering
  for each vertex v:
    if v not yet explored:
      DFS(G, v)
  F(s) = current_label
  current_label--

Strongly Connected Components
. regions of a graph where you can get from anywhere 
  to anywhere else in the region
. depending on where you initiate the search, you might
  find an individual SCC, or the entire graph
. DFS is best for this
. Kosaraju's Two-Pass Algorithm
 -- can be computed in linear time -- O(m+n)
 -- VERY simplistic
 -- algorithm:
#####################

SCC(G):
  G^rev = G with all arcs (arcs are just edges) reversed
  DFS-Loop(G^rev) # Goal: Compute "magical ordering" of nodes
    let f(v) = "finishing time" of each v
    Assume nodes labelled 1 to n
    ### G^rev is G with the directions of arcs reversed
  DFS-Loop(G) (or just run DFS-Loop) # Goal: discover the SCCs one by one
    process results in decreasing order of finishing times
    ### here nodes are re-labled with their finishing times
    ### all nodes get associated with their "leader" vertex
      ### and these all end up being in a SCC
. at end, you get number of SCCs
. running time = 2 x DFS = O(m+n)
 
DFS-Loop(Graph g) # (again, modified)
  global variable t = 0 # keep track of how many nodes we've finished exploring
                        # NOTE: Only needed in 1st pass
  global variable s = NULL # keep track of most recent vertex 
                           # from which DFS was initiated 
                           # ( for leaders in 2nd pass )
                           # NOTE: Only needed in 2nd pass
  ? global array of booleans to keep track of explored/unexplored
  ? global array to keep track of finishing times of each node
  for i = n down to 1:
    if i not yet explored:
      s := i
      DFS(G, i)

DFS(graph G, node i) # again
  mark i as explored
  set leader(i) = node s
  for each arc (i, j) in G:
    if j not yet explored:
      DFS(G, j)
  t ++
  set finishing time of i (aka f(i)) := t

to get size of SCCs, get number of occurrences of
particular leader
#####################

Why does Kosaraju's algorithm work?
. observation: the SCCs of a directed graph correspond to nodes in an acyclic "meta-graph"
  -- ie, if you 'zoom out' when looking at a directed graph and think of each SCC 
     as an individual node in a graph, that meta-graph is necessarily acyclic (if not,
     the SCCs would not be distinct)
. lemma: considering two adjacent SCCs, c1 and c2 with connected nodes i and j
  -- let f(v) = finishing times of DFS-Loop in G^rev
  lemma: max(f(v) for c2) > max(f(v) for c1)
. corollary: 
  -- maximum f-value of G must lie in a "sink SCC" (recognize that largest f-value is where we start 2nd pass)


